---
# Initial Manual Steps:
#  Install Homebrew
#  sudo chown root /usr/local/bin/brew
#  sudo brew install ansible
#  export HOMEBREW_CASK_OPTS="--appdir=/Applications"  <---- add to .zshrc
#  ansible-playbook -i "localhost" -c local main.yml --ask-become-pass

# NOTES:
# to delete a cask:
# sudo brew cask zap <cask>
# casks located in /opt

# TODO
# add more casks
# add github repos to automatically pull down
# get defaults working properly by adding handlers?

# the host in which the playbook will be run
- hosts: localhost

  # the target user Ansible will impersonate when provisioning
  user: macg

  # additional variables
  vars:
    user: macg


  tasks:
  - include_vars: vars/homebrew.yml
  - include_vars: vars/osx_defaults.yml
  - include_vars: vars/dock.yml

  - file: path=~/Pictures/Screenshots state=directory mode=0755

  - name: Install OSX Defaults
    osx_defaults:
      domain: "{{ item.domain }}"
      key: "{{ item.key }}"
      type: "{{ item.type }}"
      value: "{{ item.value }}"
      state: "{{ item.state }}"
    with_items: "{{ osx_defaults }}"
    ignore_errors: true

  - name: Install homebrew taps
    homebrew_tap:
      tap: "{{ item }}"
    with_items: "{{ brew_taps }}"
    ignore_errors: true

  - name: Install homebrew apps
    homebrew:
      name: "{{ item }}"
    with_items: '{{ brew_apps }}'
    ignore_errors: true

  - name: Install homebrew casks
    homebrew_cask:
      name: "{{ item }}"
      state: present
      install_options: "appdir={{ brew_cask_appdir }}"
    with_items: "{{ brew_casks }}"
    tags:
      - casks
    # notify:
    #   - restart Finder
    #   - restart UI

    #- name: Start services at login
    #  file: src=/usr/local/opt/{{ item }}/homebrew.mxcl.{{ item }}.plist path=~/Library/LaunchAgents/homebrew.mxcl.{{ item }}.plist state=link force=yes
    #  with_items:
    #    - mysql
    #    - elasticsearch

    #- name: Setup launch agents for services
    #  command: launchctl load {{ home }}/Library/LaunchAgents/homebrew.mxcl.{{ item }}.plist
    #  with_items:
    #    - mysql
    #    - elasticsearch
  - name: Remove all crap from Dock
    shell: dockutil --remove '{{ item }}'
    #ignore_errors: true
    with_items: "{{ dockitems_to_remove }}"

  - name: Check if items in dock exist
    shell: dockutil --find '{{ item.name }}' || dockutil --add '{{ item.path }}'
    with_items: "{{ dockitems_to_persist }}"

  - name: Fix order
    shell: dockutil --move '{{ item.name }}' --position {{ item.pos }}
    with_items: "{{ dockitems_to_persist }}"


  handlers:
    - name: restart Finder
      command: killall Finder
    - name: restart UI
      command: killall SystemUIServer
...
